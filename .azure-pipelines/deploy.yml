parameters:
- name: skipTerraformApproval
  type: boolean
  default: false
- name: skipTerraformDeploy
  type: boolean
  default: false
- name: skipArtifactDeploy
  type: boolean
  default: false

trigger:
  branches:
    include:
    - 'main'

pr: none

variables:
  terraformWorkingDirectory: '$(Build.sourcesDirectory)/tf-deploy'
  backendServiceArm: 'arm-portal-core-dev'
  backendAzureRmResourceGroupName: 'rg-portal_tfstate-dev-eastus-01'
  backendAzureRmStorageAccountName: 'saportaltfdeveastus01'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'portal-core-dev.tfstate'
  environmentServiceNameAzureRM: 'arm-portal-core-dev'
  varFile: './../tf-vars/dev.tfvars'

pool: Dedicated

resources:
  repositories:
    - repository: ado-pipeline-templates
      type: github
      name: XtremeIdiots/ado-pipeline-templates
      endpoint: XtremeIdiots

stages:
- stage: Build

  jobs:
  - template: jobs/build-function-app.yml@ado-pipeline-templates
    parameters: 
      jobName: 'BuildEventsFunctionApp'
      projectName: 'events-func'
      publishArtifact: true

  - template: jobs/build-function-app.yml@ado-pipeline-templates
    parameters: 
      jobName: 'BuildIngestFunctionApp'
      projectName: 'ingest-func'
      publishArtifact: true

  - template: jobs/build-function-app.yml@ado-pipeline-templates
    parameters: 
      jobName: 'BuildRepositoryFunctionApp'
      projectName: 'repository-func'
      publishArtifact: true

  - template: jobs/build-function-app.yml@ado-pipeline-templates
    parameters: 
      jobName: 'BuildBanSyncFunctionApp'
      projectName: 'bansync-func'
      publishArtifact: true

  - template: jobs/build-web-app.yml@ado-pipeline-templates
    parameters: 
      jobName: 'BuildMgmtWebApp'
      projectName: 'mgmt-web'
      publishArtifact: true

  - template: jobs/build-web-app.yml@ado-pipeline-templates
    parameters: 
      jobName: 'BuildAdminWebApp'
      projectName: 'admin-web'
      publishArtifact: true

  - template: jobs/build-web-app.yml@ado-pipeline-templates
    parameters: 
      jobName: 'BuildPublicWebApp'
      projectName: 'public-web'
      publishArtifact: true

  - template: jobs/build-web-app.yml@ado-pipeline-templates
    parameters: 
      jobName: 'BuildRepositoryWebApi'
      projectName: 'repository-webapi'
      publishArtifact: true
      
  - template: jobs/build-sql-database.yml@ado-pipeline-templates
    parameters:
      publishArtifact: true

- stage: Deploy

  jobs:
  - template: jobs/terraform-validate-and-plan.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipTerraformDeploy }}', 'false'))
    parameters:
      jobName: TerraformValidateAndPlan
      workingDirectory: '$(terraformWorkingDirectory)'
      backendServiceArm: '$(backendServiceArm)'
      backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
      backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
      backendAzureRmContainerName: '$(backendAzureRmContainerName)'
      backendAzureRmKey: '$(backendAzureRmKey)'
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
      varFile: '$(varFile)'

  - job: ReviewAndApproveTerraform
    condition: and(succeeded(), eq('${{ parameters.skipTerraformDeploy }}', 'false'))
    dependsOn: TerraformValidateAndPlan
    pool: server
    timeoutInMinutes: 60
    steps:   
    - task: ManualValidation@0
      condition: and(succeeded(), eq('${{ parameters.skipTerraformApproval }}', 'false'))
      inputs:
          instructions: 'Validate the terraform plan from previous stage and either resume/reject.'

  - template: jobs/terraform-plan-and-apply.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipTerraformDeploy }}', 'false'))
    parameters:
      jobName: TerraformPlanAndApply
      dependsOn: ReviewAndApproveTerraform
      workingDirectory: '$(terraformWorkingDirectory)'
      backendServiceArm: '$(backendServiceArm)'
      backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
      backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
      backendAzureRmContainerName: '$(backendAzureRmContainerName)'
      backendAzureRmKey: '$(backendAzureRmKey)'
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
      varFile: '$(varFile)'

  - template: jobs/deploy-function-app.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters:
      projectName: events-func
      jobName: DeployEventsFunctionApp
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
 
  - template: jobs/deploy-function-app.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters:
      projectName: ingest-func
      jobName: DeployIngestFunctionApp
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - template: jobs/deploy-function-app.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters:
      projectName: repository-func
      jobName: DeployRepositoryFunctionApp
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - template: jobs/deploy-function-app.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters:
      projectName: bansync-func
      jobName: DeployBanSyncFunctionApp
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - template: jobs/deploy-web-app.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters: 
      projectName: 'mgmt-web'
      jobName: 'DeployMgmtWebApp'
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - template: jobs/deploy-web-app.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters: 
      projectName: 'admin-web'
      jobName: 'DeployAdminWebApp'
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - template: jobs/deploy-web-app.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters: 
      projectName: 'public-web'
      jobName: 'DeployPublicWebApp'
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - template: jobs/deploy-web-app.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters: 
      projectName: 'repository-webapi'
      jobName: 'DeployRepositoryWebApi'
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - template: jobs/deploy-sql-database.yml@ado-pipeline-templates
    condition: and(succeeded(), eq('${{ parameters.skipArtifactDeploy }}', 'false'))
    parameters:
      jobName: DeploySqlDatabase
      dependsOn: TerraformPlanAndApply
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
