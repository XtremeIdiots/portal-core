parameters:
- name: skipTerraformApproval
  type: boolean
  default: false
- name: skipTerraformDeploy
  type: boolean
  default: false
- name: skipArtifactDeploy
  type: boolean
  default: false

trigger:
  branches:
    include:
    - 'main'

pr: none

variables:
  terraformWorkingDirectory: '$(Build.sourcesDirectory)/tf-deploy'
  backendServiceArm: 'arm-portal-core-dev'
  backendAzureRmResourceGroupName: 'rg-portal_tfstate-dev-eastus-01'
  backendAzureRmStorageAccountName: 'saportaltfdeveastus01'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'portal-core-dev.tfstate'
  environmentServiceNameAzureRM: 'arm-portal-core-dev'
  varFile: './../tf-vars/dev.tfvars'

pool: Dedicated

resources:
  repositories:
    - repository: ado-pipeline-templates
      type: github
      name: XtremeIdiots/ado-pipeline-templates
      endpoint: XtremeIdiots

stages:
- ${{ if eq(parameters.skipArtifactDeploy, false) }}:
  - stage: Build

    jobs:
    - template: jobs/build-function-app.yml@ado-pipeline-templates
      parameters: 
        jobName: 'BuildEventsFunctionApp'
        projectName: 'events-func'
        publishArtifact: true

    - template: jobs/build-function-app.yml@ado-pipeline-templates
      parameters: 
        jobName: 'BuildIngestFunctionApp'
        projectName: 'ingest-func'
        publishArtifact: true

    - template: jobs/build-function-app.yml@ado-pipeline-templates
      parameters: 
        jobName: 'BuildRepositoryFunctionApp'
        projectName: 'repository-func'
        publishArtifact: true

    - template: jobs/build-function-app.yml@ado-pipeline-templates
      parameters: 
        jobName: 'BuildBanSyncFunctionApp'
        projectName: 'bansync-func'
        publishArtifact: true

    - template: jobs/build-web-app.yml@ado-pipeline-templates
      parameters: 
        jobName: 'BuildMgmtWebApp'
        projectName: 'mgmt-web'
        publishArtifact: true

    - template: jobs/build-web-app.yml@ado-pipeline-templates
      parameters: 
        jobName: 'BuildAdminWebApp'
        projectName: 'admin-web'
        publishArtifact: true

    - template: jobs/build-web-app.yml@ado-pipeline-templates
      parameters: 
        jobName: 'BuildPublicWebApp'
        projectName: 'public-web'
        publishArtifact: true

    - template: jobs/build-web-app.yml@ado-pipeline-templates
      parameters: 
        jobName: 'BuildRepositoryWebApi'
        projectName: 'repository-webapi'
        publishArtifact: true

    - template: jobs/build-sql-database.yml@ado-pipeline-templates
      parameters:
        publishArtifact: true

- stage: Deploy

  variables:
  - group: b2c-tenant

  jobs:
  - ${{ if eq(parameters.skipTerraformDeploy, false) }}:
    - template: jobs/terraform-validate-and-plan.yml@ado-pipeline-templates
      parameters:
        jobName: TerraformValidateAndPlan
        workingDirectory: '$(terraformWorkingDirectory)'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
        varFile: '$(varFile)'
        additionalCommandOptions: '-var="b2c_tenant_client_id=$(client-id)" -var="b2c_tenant_client_secret=$(client-secret)"'

  - ${{ if eq(parameters.skipTerraformDeploy, false) }}:
    - job: ReviewAndApproveTerraform
      dependsOn: TerraformValidateAndPlan
      pool: server
      timeoutInMinutes: 60
      steps:   
      - task: ManualValidation@0
        condition: and(succeeded(), eq('${{ parameters.skipTerraformApproval }}', 'false'))
        inputs:
            instructions: 'Validate the terraform plan from previous stage and either resume/reject.'

  - ${{ if eq(parameters.skipTerraformDeploy, false) }}:
    - template: jobs/terraform-plan-and-apply.yml@ado-pipeline-templates
      parameters:
        jobName: TerraformPlanAndApply
        dependsOn: ReviewAndApproveTerraform
        workingDirectory: '$(terraformWorkingDirectory)'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
        varFile: '$(varFile)'
        additionalCommandOptions: '-var="b2c_tenant_client_id=$(client-id)" -var="b2c_tenant_client_secret=$(client-secret)"'

  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-function-app.yml@ado-pipeline-templates
      parameters:
        projectName: events-func
        jobName: DeployEventsFunctionApp
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
 
  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-function-app.yml@ado-pipeline-templates
      parameters:
        projectName: ingest-func
        jobName: DeployIngestFunctionApp
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-function-app.yml@ado-pipeline-templates
      parameters:
        projectName: repository-func
        jobName: DeployRepositoryFunctionApp
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-function-app.yml@ado-pipeline-templates
      parameters:
        projectName: bansync-func
        jobName: DeployBanSyncFunctionApp
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-web-app.yml@ado-pipeline-templates
      parameters: 
        projectName: 'mgmt-web'
        jobName: 'DeployMgmtWebApp'
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-web-app.yml@ado-pipeline-templates
      parameters: 
        projectName: 'admin-web'
        jobName: 'DeployAdminWebApp'
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-web-app.yml@ado-pipeline-templates
      parameters: 
        projectName: 'public-web'
        jobName: 'DeployPublicWebApp'
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-web-app.yml@ado-pipeline-templates
      parameters: 
        projectName: 'repository-webapi'
        jobName: 'DeployRepositoryWebApi'
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'

  - ${{ if eq(parameters.skipArtifactDeploy, false) }}:
    - template: jobs/deploy-sql-database.yml@ado-pipeline-templates
      parameters:
        jobName: DeploySqlDatabase
        dependsOn: TerraformPlanAndApply
        environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
