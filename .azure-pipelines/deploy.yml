trigger:
  branches:
    include:
    - 'main'

pr: none

variables:
  terraformWorkingDirectory: '$(Build.sourcesDirectory)/tf-deploy'
  backendServiceArm: 'arm-portal-core-dev'
  backendAzureRmResourceGroupName: 'rg-portal_tfstate-dev-eastus-01'
  backendAzureRmStorageAccountName: 'saportaltfdeveastus01'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'portal-core-dev.tfstate'
  environmentServiceNameAzureRM: 'arm-portal-core-dev'
  varFile: './../tf-vars/dev.tfvars'

resources:
  repositories:
    - repository: ado-pipeline-templates
      type: github
      name: XtremeIdiots/ado-pipeline-templates
      endpoint: XtremeIdiots

stages:
- stage: Build

  jobs:
  - template: jobs/build-function-app.yml@ado-pipeline-templates
    parameters:
      publishArtifact: true

  - template: jobs/build-sql-database.yml@ado-pipeline-templates
    parameters:
      publishArtifact: true

- stage: Deploy

  jobs:
  - template: jobs/terraform-validate-and-plan.yml@ado-pipeline-templates
    parameters:
      jobName: TerraformValidateAndPlan
      workingDirectory: '$(terraformWorkingDirectory)'
      backendServiceArm: '$(backendServiceArm)'
      backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
      backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
      backendAzureRmContainerName: '$(backendAzureRmContainerName)'
      backendAzureRmKey: '$(backendAzureRmKey)'
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
      varFile: '$(varFile)'

  - job: ReviewAndApproveTerraform
    dependsOn: TerraformValidateAndPlan
    pool: server
    timeoutInMinutes: 60
    steps:   
    - task: ManualValidation@0
      inputs:
          instructions: 'Validate the terraform plan from previous stage and either resume/reject.'

  - template: jobs/terraform-plan-and-apply.yml@ado-pipeline-templates
    parameters:
      jobName: TerraformPlanAndApply
      dependsOn: ReviewAndApproveTerraform
      workingDirectory: '$(terraformWorkingDirectory)'
      backendServiceArm: '$(backendServiceArm)'
      backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
      backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
      backendAzureRmContainerName: '$(backendAzureRmContainerName)'
      backendAzureRmKey: '$(backendAzureRmKey)'
      environmentServiceNameAzureRM: '$(environmentServiceNameAzureRM)'
      varFile: '$(varFile)'

  - job: DeployFunctionApp
    dependsOn: TerraformPlanAndApply

    variables:
    - name: function_app_name
      value: $[ dependencies.TerraformPlanAndApply.outputs['TerraformPlanAndApply.TerraformPlanAndApply.function_app_name'] ]
    - name: sql_database_connection_string
      value: $[ dependencies.TerraformPlanAndApply.outputs['TerraformPlanAndApply.TerraformPlanAndApply.sql_database_connection_string'] ]

    steps: 
      - download: current
        displayName: 'Download function-app artifact'
        artifact: function-app

      - task: AzureFunctionApp@1
        inputs:
          azureSubscription: '$(environmentServiceNameAzureRM)'
          appName: '$(function_app_name)'
          package: '$(Pipeline.Workspace)/function-app/function-app.zip'
          